 ========= view  =======

CREATE VIEW student_class_view AS
 	SELECT students.s_id, students.name as student_name, students.class as s_class, class.name as c_name FROM students, class  WHERE students.class  = class.name ;

==========Foreign Key=========
ALTER TABLE table_name ADD CONSTRAINT const_name FOREIGN KEY (col_name) REFERENCES ref_table_name(ref_table_col-name);

-------------------------------
ALTER TABLE student_class 
ADD CONSTRAINT fK 
FOREIGN KEY (s_id) REFERENCES students(s_id);



================== student & class view  =====================

select `sms_db`.`students`.`s_id` AS `s_id`,`sms_db`.`class`.`c_id` AS `c_id`,`sms_db`.`students`.`name` AS `student_name`,`sms_db`.`students`.`class` AS `s_class`,`sms_db`.`class`.`name` AS `c_name` from (`sms_db`.`students` join `sms_db`.`class`) where `sms_db`.`students`.`class` = `sms_db`.`class`.`name`




================ payment table raff ===============

Student Fees Collection
id - st_id - Name - class - Expense Type - Amount - status - date

Expenses
id - te_id - Name - Expense Type - Amount - status - date

Add Expenses 
te_id - name - Expense Type - Amount - status - date


================ Attendance table raff ===============
Submit Attendance
id - st_id - st_name - st_class - status 

All Attendance



================ Library table raff ===============
Add New Book
id - Book_name - Subject - class - published

All Book



=================  Exam Table Raff =============
Exam
id - Exam_name - subject - class - date - time  

All Exams


================== class routine =====================
Add class routine
id - subject_name - class - te_id - te_name - time - date - day 

show routines 
teacher_routine_view


=================== guide teachers ====================
id - te_name - te_id - st_id - st_name - class



=================== Result =========================
id - st_id - st_name - st_class - exam_name - marks - result 



========== diagram querys ==========

ALTER TABLE expenses
ADD CONSTRAINT fK_teacher_expenses_key 
FOREIGN KEY (te_id) REFERENCES teachers(t_id);



ALTER TABLE students
ADD CONSTRAINT fK_students_class_key 
FOREIGN KEY (class) REFERENCES class(c_id);



ALTER TABLE student_fees_collection
ADD CONSTRAINT fK_students_fees_key 
FOREIGN KEY (st_id) REFERENCES students(s_id);



ALTER TABLE books
ADD CONSTRAINT fK_books_class_key
FOREIGN KEY (class) REFERENCES class(c_id);



ALTER TABLE routine
ADD CONSTRAINT fK_routine_class_key
FOREIGN KEY (class) REFERENCES class(c_id);



ALTER TABLE routine
ADD CONSTRAINT fK_routine_teacher_key
FOREIGN KEY (te_id) REFERENCES teachers(t_id);


ALTER TABLE attendance_table
ADD CONSTRAINT fK_attendence_students_key
FOREIGN KEY (st_id) REFERENCES students(s_id);



ALTER TABLE exam
ADD CONSTRAINT fK_exam_class_key
FOREIGN KEY (class) REFERENCES class(c_id);



ALTER TABLE guide_teachers
ADD CONSTRAINT fK_guide_teacher_key
FOREIGN KEY (te_id) REFERENCES teachers(t_id);



ALTER TABLE guide_teachers
ADD CONSTRAINT fK_guide_students_key
FOREIGN KEY (st_id) REFERENCES students(s_id);




-------------------------------------------------------
CREATE TABLE attendance_table (
    id INT AUTO_INCREMENT PRIMARY KEY,
    st_id INT NOT NULL,
    st_name VARCHAR(255) NOT NULL,
    st_class VARCHAR(255) NOT NULL,
	status VARCHAR(10) NOT NULL
);
-------------------------------------------------

=====================  save one table's data to another  ============================

INSERT INTO attendance_table (`st_id`, `st_name`, `st_class`) SELECT `s_id`, `name`, `class` FROM students;
   
INSERT INTO result (`st_id`, `st_name`, `st_class`) SELECT `s_id`, `name`, `class` FROM students;


------------------------------------------------
					 triggers 
-------------------------------------------------

trigger for students and attendance_table

CREATE TRIGGER `after_students_insert` AFTER INSERT ON `students`
 FOR EACH ROW INSERT INTO attendance_table SET
	st_id = NEW.s_id,
	st_name = NEW.name,
	st_class = NEW.class;

//( left side attendance_table ---- right side  students table)//


-------------------------------------------------
// trigger for students and student_fees_collection 

CREATE TRIGGER `student_delete_trigger` AFTER DELETE ON `students`
 FOR EACH ROW DELETE FROM student_fees_collection WHERE st_id = OLD.s_id

---------------------------------------------------


// trigger for teacher and expenses 

CREATE TRIGGER `teacher_delete_after` AFTER DELETE ON `teachers`
 FOR EACH ROW DELETE FROM expenses WHERE te_id = OLD.t_id



 // trigger insert for students & results 

 CREATE TRIGGER `result_students_insert` AFTER INSERT ON `students`
 FOR EACH ROW INSERT INTO result SET
	st_id = NEW.s_id,
	st_name = NEW.name,
	st_class = NEW.class ;


============= To DO ===============

1. Result, payments module - Edit
2. Search and filtering for all module
3. Books Module
4. Trigger insert for students & collections { if ( 1 == true ) }
4. Result, payments module - Delete ( optional )
5. Notice Modal ( optional )